/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package libraryproject;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author majin_000
 */
public class bookBorrowUI extends javax.swing.JFrame {

    /**
     * Creates new form bookBorrowUI
     */
    ArrayList<Book> books = new ArrayList<Book>();
    Book myBook = new Book();
    Record myRecord = new Record();
    ArrayList<Record> records = new ArrayList<Record>();
    User currentUser = new User();
    boolean borrowFlag = true;
    int index = 0;
    MyRecordManageUI myRecords;
    public bookBorrowUI(User user) {
        initComponents();
        if (user != null) {
            currentUser = user;
        }
        GetBookList();
        DefaultListModel model = new DefaultListModel();
        if (books != null && !books.isEmpty()) {
            
            String[] booksInfo = new String[books.size()];
            for(int i = 0; i < booksInfo.length; i++) {
                booksInfo[i] = books.get(i).getId() + "//" + books.get(i).getIsbn() + "//" + books.get(i).getTitle()
                        + "//" + books.get(i).getAuthor() + "//" + books.get(i).getQuantity();
                model.addElement(booksInfo[i]);
            }
            bookList.setModel(model);
        }
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchTF = new javax.swing.JTextField();
        searchB = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookList = new javax.swing.JList<>();
        borrowB = new javax.swing.JButton();
        CancelB = new javax.swing.JButton();
        recordsB = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Library System - borrow book");

        searchB.setText("Search");
        searchB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(bookList);

        borrowB.setText("Borrow");
        borrowB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrowBActionPerformed(evt);
            }
        });

        CancelB.setText("Cancel");
        CancelB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelBActionPerformed(evt);
            }
        });

        recordsB.setText("My Records");
        recordsB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordsBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(borrowB)
                        .addGap(52, 52, 52)
                        .addComponent(recordsB)
                        .addGap(53, 53, 53)
                        .addComponent(CancelB))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(searchTF, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(searchB))
                        .addComponent(jScrollPane1)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(borrowB)
                    .addComponent(CancelB)
                    .addComponent(recordsB))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBActionPerformed
        myBook.setId(Integer.parseInt(searchTF.getText()));
        myBook = OracleConnect.doSelectBook(myBook);
        borrowBook();
    }//GEN-LAST:event_searchBActionPerformed

    private void borrowBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrowBActionPerformed
        String[] bookContent = bookList.getSelectedValue().split("//");
        if (bookContent.length == 0) {
            JOptionPane.showMessageDialog(null, "Please select a book in list", "Borrow Book", JOptionPane.INFORMATION_MESSAGE);
        } else {
            myBook.setId(Integer.parseInt(bookContent[0]));
            myBook = OracleConnect.doSelectBook(myBook);
            borrowBook();
        }
    }//GEN-LAST:event_borrowBActionPerformed

    private void CancelBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelBActionPerformed
        setVisible(false);
    }//GEN-LAST:event_CancelBActionPerformed

    private void recordsBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordsBActionPerformed
        myRecords = new MyRecordManageUI(currentUser);
    }//GEN-LAST:event_recordsBActionPerformed

    public void borrowBook() {
        borrowFlag = true;
        if (myBook != null) {
            String str = "Book Id: " + myBook.getId() + "\nISBN: " + myBook.getIsbn() + "\nTitle: " + myBook.getTitle()
                        + "\nAuthor: " + myBook.getAuthor() + "\nQuantity: " + myBook.getQuantity();
            int result = JOptionPane.showConfirmDialog(null, str + "\nDo you want to borrow this book?", "Book Borrow", JOptionPane.WARNING_MESSAGE);
            if (result == JOptionPane.OK_OPTION) {
                if (myBook.getQuantity() == 0) {
                    JOptionPane.showMessageDialog(null, "No more this book in library", "Book Borrow", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    Date today = new Date();
                    GetMyRecords(currentUser.getUserName());
                    if (records != null && !records.isEmpty()) {
                        for(Record r: records) {
                            if ((r.getBid() == myBook.getId()) && r.getIsReturn() == 0) {
                                borrowFlag = false;
                                break;
                            }
                        }
                        if (borrowFlag) {
                            Record myRecord = new Record();
                            String rId = "record" + (records.size() + 1);
                            myRecord.setRecordId(rId);
                            myRecord.setBid(myBook.getId());
                            myRecord.setBorrowTime(today);
                            myRecord.setIsReturn(0);
                            myRecord.setPenalty(0);
                            myRecord.setUsername(currentUser.getUserName());
                            Calendar c = Calendar.getInstance();
                            c.setTime(today);
                            c.add(Calendar.DATE, 60);
                            myRecord.setDueTime(new Date(c.getTimeInMillis()));
                
                            if (myBook.getHistory() != null && !myBook.getHistory().isEmpty() && !myBook.getHistory().equals("null")) {
                                myBook.setHistory(myBook.getHistory() + ";" + currentUser.getUserName() + " borrowed this book on " + today.toString());
                            } else {
                                myBook.setHistory(currentUser.getUserName() + " borrowed this book on " + today.toString());
                            }
                
                            OracleConnect.doAddRecord(myRecord);
                            OracleConnect.doUpdateBook(myBook);
                        } else {
                            JOptionPane.showMessageDialog(null, "You have already borrowed the book", "Borrow Book", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else if (records != null && records.isEmpty()) {
                            Record myRecord = new Record();
                            myRecord.setRecordId("record1");
                            myRecord.setBid(myBook.getId());
                            myRecord.setBorrowTime(today);
                            myRecord.setIsReturn(0);
                            myRecord.setPenalty(0);
                            myRecord.setUsername(currentUser.getUserName());
                            myRecord.setDueTime(new Date(today.getTime() + (1000 * 60 * 60 * 24 * 60)));
                
                            if (!"".equals(myBook.getHistory())) {
                                myBook.setHistory(myBook.getHistory() + ";" + currentUser.getUserName() + " borrowed this book on " + today.toString());
                            } else {
                                myBook.setHistory(currentUser.getUserName() + " borrowed this book on " + today.toString());
                            }
                
                            if (OracleConnect.doAddRecord(myRecord)) {
                                OracleConnect.doUpdateBook(myBook);
                            }
                    }
                }
            }
        }
    }
    public void GetMyRecords(String username) {
        records = OracleConnect.doSelectAllRecordsForSpeicalUser(username);    
    }
    
    public void GetBookList() { 
        books = new ArrayList<Book>();
        books = OracleConnect.doSelectAllBook();
        if (books != null && !books.isEmpty()) {
            for (Book b: books) {
                Publisher tmpPublisher = OracleConnect.doSelectPublisher(b.getPublisher().getPid());
                if (tmpPublisher != null) {
                    b.setPublisher(tmpPublisher);
                }
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelB;
    private javax.swing.JList<String> bookList;
    private javax.swing.JButton borrowB;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton recordsB;
    private javax.swing.JButton searchB;
    private javax.swing.JTextField searchTF;
    // End of variables declaration//GEN-END:variables
}
