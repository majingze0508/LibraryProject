/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package libraryproject;
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import java.util.ArrayList;
/**
 *
 * @author cstuser
 */
public class BookManagementUI extends JFrame {

    /**
     * Creates new form BookManagementUI
     */
    bookEditUI bookEdit;
    categoryManageUI categoryManage;
    Book myBook;
    ArrayList<Book> books = new ArrayList<Book>();
    String[] booksInfo;
    publisherManageUI publisherUI;
    public BookManagementUI() {
        initComponents();
        myBook = new Book();
        GetBookList();
        DefaultListModel model = new DefaultListModel();
        if (books != null && !books.isEmpty()) {
            
            String[] booksInfo = new String[books.size()];
            String str = "";
            for(int i = 0; i < booksInfo.length; i++) {
                if (books.get(i).getHistory() != null && !books.get(i).getHistory().isEmpty()) {
                    str = books.get(i).getHistory();
                }
                booksInfo[i] = books.get(i).getId() + "//" + books.get(i).getIsbn() + "//" + books.get(i).getTitle()
                        + "//" + books.get(i).getAuthor() + "//" + books.get(i).getPrice()
                        + "//" + books.get(i).getQuantity() + "//" + str;
                model.addElement(booksInfo[i]);
            }
            BookList.setModel(model);
        }
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchTF = new javax.swing.JTextField();
        SearchB = new javax.swing.JButton();
        AddBookB = new javax.swing.JButton();
        ExitBookB = new javax.swing.JButton();
        BookListB = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        BookList = new javax.swing.JList<String>();
        CategoryB = new javax.swing.JButton();
        PubliserB = new javax.swing.JButton();
        updateB = new javax.swing.JButton();
        deleteB = new javax.swing.JButton();

        setTitle("Libraray System - Book Management");

        SearchB.setText("Search");
        SearchB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBActionPerformed(evt);
            }
        });

        AddBookB.setText("Add");
        AddBookB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBookBActionPerformed(evt);
            }
        });

        ExitBookB.setText("Exit");
        ExitBookB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitBookBActionPerformed(evt);
            }
        });

        BookListB.setText("Book List");
        BookListB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookListBActionPerformed(evt);
            }
        });

        BookList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        BookList.setToolTipText("");
        jScrollPane1.setViewportView(BookList);

        CategoryB.setText("Category Management");
        CategoryB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoryBActionPerformed(evt);
            }
        });

        PubliserB.setText("Publiser Management");
        PubliserB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PubliserBActionPerformed(evt);
            }
        });

        updateB.setText("Update");
        updateB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBActionPerformed(evt);
            }
        });

        deleteB.setText("Delete");
        deleteB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(searchTF, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addComponent(SearchB))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddBookB, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CategoryB)
                        .addGap(18, 18, 18)
                        .addComponent(PubliserB)
                        .addGap(18, 18, 18)
                        .addComponent(BookListB)
                        .addGap(18, 18, 18)
                        .addComponent(ExitBookB, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteB)
                    .addComponent(updateB))
                .addContainerGap(85, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchB))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(updateB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteB)
                        .addGap(88, 88, 88)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ExitBookB)
                    .addComponent(AddBookB)
                    .addComponent(BookListB)
                    .addComponent(CategoryB)
                    .addComponent(PubliserB))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GetBookList() { 
        books = new ArrayList<Book>();
        books = OracleConnect.doSelectAllBook();
        if (books != null && !books.isEmpty()) {
            for (Book b: books) {
                Publisher tmpPublisher = OracleConnect.doSelectPublisher(b.getPublisher().getPid());
                if (tmpPublisher != null) {
                    b.setPublisher(tmpPublisher);
                }
            }
        }
    }
    private void AddBookBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBookBActionPerformed
        bookEdit = new bookEditUI(null, "Add");
    }//GEN-LAST:event_AddBookBActionPerformed

    private void CategoryBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoryBActionPerformed
        categoryManage = new categoryManageUI();
    }//GEN-LAST:event_CategoryBActionPerformed

    private void BookListBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookListBActionPerformed
        GetBookList();
        if (books == null || books.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No any book record", "Book List", JOptionPane.INFORMATION_MESSAGE);
        } else {
            String bookStr = "";
            int index = 1;
            for (Book b: books) {
                bookStr += "record" + index + ":\nISBN: " + b.getIsbn()
                        + "\ntitle: " + b.getTitle()
                        + "\nauthor: " + b.getAuthor() + "\nprice: " + b.getPrice()
                        + "\nquantity: "+ b.getQuantity() + "\nborrow history:"
                        + b.getHistory() + "\n\n";
                index++;
            }
            JOptionPane.showMessageDialog(null, bookStr, "Book List", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_BookListBActionPerformed

    private void ExitBookBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitBookBActionPerformed
        setVisible(false);
    }//GEN-LAST:event_ExitBookBActionPerformed

    private void updateBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBActionPerformed
        String[] bookContent = BookList.getSelectedValue().toString().split("//");
        for (Book b: books) {
            if (b.getId() == Integer.parseInt(bookContent[0])) {
                myBook = b;
                break;
            }
        }
        /*myBook.setId(Integer.parseInt(bookContent[0]));
        myBook.setIsbn(bookContent[1]);
        myBook.setTitle(bookContent[2]);
        myBook.setAuthor(bookContent[3]);
        myBook.setPrice(Double.parseDouble(bookContent[4]));
        myBook.setQuantity(Integer.parseInt(bookContent[5]));
        myBook.setHistory(bookContent[6]);*/
        bookEdit = new bookEditUI(myBook, "Update");
    }//GEN-LAST:event_updateBActionPerformed

    private void deleteBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBActionPerformed
        String[] bookContent = BookList.getSelectedValue().toString().split("//");
        for (Book b: books) {
            if (b.getId() == Integer.parseInt(bookContent[0])) {
                myBook = b;
                break;
            }
        }
        int result = JOptionPane.showConfirmDialog(null, "Do you want to delete this book", "Book Delete", JOptionPane.WARNING_MESSAGE);
        if (result == JOptionPane.OK_OPTION) {
            OracleConnect.doDeleteBook(myBook);
        }
    }//GEN-LAST:event_deleteBActionPerformed

    private void SearchBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBActionPerformed
        myBook.setId(Integer.parseInt(searchTF.getText()));
        myBook = OracleConnect.doSelectBook(myBook);
        if (myBook != null) {
            bookEdit = new bookEditUI(myBook, "Update");
        } else {
            JOptionPane.showMessageDialog(null, "Not found any record", "Book Search", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_SearchBActionPerformed

    private void PubliserBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PubliserBActionPerformed
        publisherUI = new publisherManageUI();
    }//GEN-LAST:event_PubliserBActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBookB;
    private javax.swing.JList<String> BookList;
    private javax.swing.JButton BookListB;
    private javax.swing.JButton CategoryB;
    private javax.swing.JButton ExitBookB;
    private javax.swing.JButton PubliserB;
    private javax.swing.JButton SearchB;
    private javax.swing.JButton deleteB;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchTF;
    private javax.swing.JButton updateB;
    // End of variables declaration//GEN-END:variables
}
